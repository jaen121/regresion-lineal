bptest(modelo.lineal)
# Análisis gráfico autocorrelación de los residuos
ggplot(data = trees, aes(x = seq_along(modelo.lineal$residuals),
y = modelo.lineal$residuals)) +
geom_point(aes(color = modelo.lineal$residuals)) +
scale_color_gradient2(low = "blue3", mid = "grey", high = "red") +
geom_line(size = 0.3) +
labs(title = "Distribución de los residuos", x = "index", y = "residuo")+
geom_hline(yintercept = 0) +
theme(plot.title = element_text(hjust = 0.5), legend.position = "none")
# Análisis gráfico autocorrelación de los residuos
ggplot(data = data1, aes(x = seq_along(modelo.lineal$residuals),
y = modelo.lineal$residuals)) +
geom_point(aes(color = modelo.lineal$residuals)) +
scale_color_gradient2(low = "blue3", mid = "grey", high = "red") +
geom_line(size = 0.3) +
labs(title = "Distribución de los residuos", x = "index", y = "residuo")+
geom_hline(yintercept = 0) +
theme(plot.title = element_text(hjust = 0.5), legend.position = "none")
# Análisis gráfico autocorrelación de los residuos
library(ggplot2)
ggplot(data = data1, aes(x = seq_along(modelo.lineal$residuals),
y = modelo.lineal$residuals)) +
geom_point(aes(color = modelo.lineal$residuals)) +
scale_color_gradient2(low = "blue3", mid = "grey", high = "red") +
geom_line(size = 0.3) +
labs(title = "Distribución de los residuos", x = "index", y = "residuo")+
geom_hline(yintercept = 0) +
theme(plot.title = element_text(hjust = 0.5), legend.position = "none")
# Residuos estudentizados
studentized_residual <- rstudent(modelo.lineal)
which(abs(studentized_residual) > 3)
library(car)
summary(influence.measures(model = modelo.lineal))
# Revisar que es
library(car)
influencePlot(model = modelo.lineal)
ggplot(data = data1, mapping = aes(x = areaconst, y = preciom)) +
geom_point(color = "grey50", size = 2) +
#recta de regresión con todas las observaciones
geom_smooth(method = "lm", se = FALSE, color = "black") +
#se resalta el valor excluido
geom_point(data = data1[28, ], color = "red", size = 2) +
#se añade la nueva recta de regresión
geom_smooth(data = trees[-28, ], method="lm", se =FALSE,color = "blue") +
labs(x = "Diámetro", y = "Volumen") +
theme_bw() + theme(plot.title = element_text(hjust = 0.5), legend.position = "none")
influencePlot(model = modelo.lineal)
ggplot(data = data1, mapping = aes(x = areaconst, y = preciom)) +
geom_point(color = "grey50", size = 2) +
#recta de regresión con todas las observaciones
geom_smooth(method = "lm", se = FALSE, color = "black") +
#se resalta el valor excluido
geom_point(data = data1[28, ], color = "red", size = 2) +
#se añade la nueva recta de regresión
geom_smooth(data = trees[-28, ], method="lm", se =FALSE,color = "blue") +
labs(x = "Diámetro", y = "Volumen") +
theme_bw() + theme(plot.title = element_text(hjust = 0.5), legend.position = "none")
# Reajuste del modelo
library(ggplot2)
ggplot(data = data1, mapping = aes(x = areaconst, y = preciom)) +
geom_point(color = "grey50", size = 2) +
#recta de regresión con todas las observaciones
geom_smooth(method = "lm", se = FALSE, color = "black") +
#se resalta el valor excluido
geom_point(data = data1[28, ], color = "red", size = 2) +
#se añade la nueva recta de regresión
geom_smooth(data = trees[-28, ], method="lm", se =FALSE,color = "blue") +
labs(x = "Diámetro", y = "Volumen") +
theme_bw() + theme(plot.title = element_text(hjust = 0.5), legend.position = "none")
ggplot(data = data1, mapping = aes(x =areaconst, y = preciom)) +
geom_point(color = "grey50", size = 2) +
#recta de regresión con todas las observaciones
geom_smooth(method = "lm", se = FALSE, color = "black") +
#se resalta el valor excluido
geom_point(data = data1[28, ], color = "red", size = 2) +
#se añade la nueva recta de regresión
geom_smooth(data = trees[-28, ], method="lm", se =FALSE,color = "blue") +
labs(x = "Diámetro", y = "Volumen") +
theme_bw() + theme(plot.title = element_text(hjust = 0.5), legend.position = "none")
ggplot(data = data1, mapping = aes(x=areaconst, y = preciom)) +
geom_point(color = "grey50", size = 2) +
#recta de regresión con todas las observaciones
geom_smooth(method = "lm", se = FALSE, color = "black") +
#se resalta el valor excluido
geom_point(data = data1[28, ], color = "red", size = 2) +
#se añade la nueva recta de regresión
geom_smooth(data = data1[-28, ], method="lm", se =FALSE,color = "blue") +
labs(x = "Diámetro", y = "Volumen") +
theme_bw() + theme(plot.title = element_text(hjust = 0.5), legend.position = "none")
ggplot(data = data1, mapping = aes(x=areaconst, y = preciom)) +
geom_point(color = "grey50", size = 2) +
#recta de regresión con todas las observaciones
geom_smooth(method = "lm", se = FALSE, color = "black") +
#se resalta el valor excluido
geom_point(data = data1[28, ], color = "red", size = 2) +
#se añade la nueva recta de regresión
geom_smooth(data = data1[-28, -148 ], method="lm", se =FALSE,color = "blue") +
labs(x = "Diámetro", y = "Volumen") +
theme_bw() + theme(plot.title = element_text(hjust = 0.5), legend.position = "none")
ggplot(data = data1, mapping = aes(x=areaconst, y = preciom)) +
geom_point(color = "grey50", size = 2) +
#recta de regresión con todas las observaciones
geom_smooth(method = "lm", se = FALSE, color = "black") +
#se resalta el valor excluido
geom_point(data = data1[28,148 ], color = "red", size = 2) +
#se añade la nueva recta de regresión
geom_smooth(data = data1[-28,-148  ], method="lm", se =FALSE,color = "blue") +
labs(x = "Diámetro", y = "Volumen") +
theme_bw() + theme(plot.title = element_text(hjust = 0.5), legend.position = "none")
ggplot(data = data1, mapping = aes(x=areaconst, y = preciom)) +
geom_point(color = "grey50", size = 2) +
#recta de regresión con todas las observaciones
geom_smooth(method = "lm", se = FALSE, color = "black") +
#se resalta el valor excluido
geom_point(data = data1[28, ], color = "red", size = 2) +
#se añade la nueva recta de regresión
geom_smooth(data = data1[-28,  ], method="lm", se =FALSE,color = "blue") +
labs(x = "Diámetro", y = "Volumen") +
theme_bw() + theme(plot.title = element_text(hjust = 0.5), legend.position = "none")
ggplot(data = data1, mapping = aes(x=areaconst, y = preciom)) +
geom_point(color = "grey50", size = 2) +
#recta de regresión con todas las observaciones
geom_smooth(method = "lm", se = FALSE, color = "black") +
#se resalta el valor excluido
geom_point(data = data1[148, ], color = "red", size = 2) +
#se añade la nueva recta de regresión
geom_smooth(data = data1[-148,  ], method="lm", se =FALSE,color = "blue") +
labs(x = "Diámetro", y = "Volumen") +
theme_bw() + theme(plot.title = element_text(hjust = 0.5), legend.position = "none")
ggplot(data = data1, mapping = aes(x=areaconst, y = preciom)) +
geom_point(color = "grey50", size = 2) +
#recta de regresión con todas las observaciones
geom_smooth(method = "lm", se = FALSE, color = "black") +
#se resalta el valor excluido
geom_point(data = data1[230, ], color = "red", size = 2) +
#se añade la nueva recta de regresión
geom_smooth(data = data1[-230,  ], method="lm", se =FALSE,color = "blue") +
labs(x = "Diámetro", y = "Volumen") +
theme_bw() + theme(plot.title = element_text(hjust = 0.5), legend.position = "none")
ggplot(data = data1, mapping = aes(x=areaconst, y = preciom)) +
geom_point(color = "grey50", size = 2) +
#recta de regresión con todas las observaciones
geom_smooth(method = "lm", se = FALSE, color = "black") +
#se resalta el valor excluido
geom_point(data = data1[441, ], color = "red", size = 2) +
#se añade la nueva recta de regresión
geom_smooth(data = data1[-441,  ], method="lm", se =FALSE,color = "blue") +
labs(x = "Diámetro", y = "Volumen") +
theme_bw() + theme(plot.title = element_text(hjust = 0.5), legend.position = "none")
modelo.lineal2 <- lm(Volume ~ Girth, data12 = data1[-28,])
modelo.lineal2 <- lm(areaconst ~ preciom, data12 = data1[c(-28,-148,-230,-442,-664, -911),])
ggplot(data = data1, mapping = aes(x=areaconst, y = preciom)) +
geom_point(color = "grey50", size = 2) +
#recta de regresión con todas las observaciones
geom_smooth(method = "lm", se = FALSE, color = "black") +
#se resalta el valor excluido
geom_point(data = data1[c(-28,-148,-230,-442,-664, -911), ], color = "red", size = 2) +
#se añade la nueva recta de regresión
geom_smooth(data = data1[-441,  ], method="lm", se =FALSE,color = "blue") +
labs(x = "Diámetro", y = "Volumen") +
theme_bw() + theme(plot.title = element_text(hjust = 0.5), legend.position = "none")
ggplot(data = data1, mapping = aes(x=areaconst, y = preciom)) +
geom_point(color = "grey50", size = 2) +
#recta de regresión con todas las observaciones
geom_smooth(method = "lm", se = FALSE, color = "black") +
#se resalta el valor excluido
geom_point(data = data1[c(-28,-148,-230,-442,-664, -911), ], color = "red", size = 2) +
#se añade la nueva recta de regresión
geom_smooth(data = data1[c(-28,-148,-230,-442,-664, -911),  ], method="lm", se =FALSE,color = "blue") +
labs(x = "Diámetro", y = "Volumen") +
theme_bw() + theme(plot.title = element_text(hjust = 0.5), legend.position = "none")
modelo.lineal2 <- lm(areaconst ~ preciom, data12 = data1[c(-28,-148,-230,-442,-664, -911),])
modelo.lineal2 <- lm(areaconst ~ preciom, data12 = data1[c(-28,-148,-230,-442,-664, -911),])
modelo.lineal2 <- lm(areaconst ~ preciom, data1 = data1[c(-28,-148,-230,-442,-664, -911),])
modelo.lineal2 <- lm(areaconst ~ preciom, data2= data1[c(-28,-148,-230,-442,-664, -911),])
modelo.lineal2 <- lm(areaconst ~ preciom, data= data1[c(-28,-148,-230,-442,-664, -911),])
summary(modelo.lineal2)
influencePlot(model = modelo.lineal2)
predict(modelo.lineal, data.frame(areaconst = 150), interval = "confidence")
predict(modelo.lineal, data.frame(areaconst = 150), interval = "confidence")
predict(modelo.lineal2, data1(areaconst = 150), interval = "confidence")
# Volumen esperado de UN árbol de 15 pulgadas
predict(modelo.lineal, data.frame(areaconst = 15), interval = "prediction")
predict(modelo.lineal2, data1(preciom = 150), interval = "confidence")
#predict(modelo.lineal2, data1(preciom = 150), interval = "confidence")
nuevo <- data.frame(areaconst = 150)
predict(object=mod1, newdata=nuevo, interval="confidence", level=0.95)
predict(object=modelo.lineal2, newdata=nuevo, interval="confidence", level=0.95)
# Volumen PROMEDIO que esperaríamos de árboles de 15 pulgadas
predict(modelo.lineal, data.frame(areaconst = 200), interval = "confidence")
# Volumen PROMEDIO que esperaríamos de árboles de 15 pulgadas
#predict(modelo.lineal, data.frame(areaconst = 200), interval = "confidence")
nuevo <- data.frame(areaconst=200)
predict(object=modelo.lineal2, newdata=nuevo, interval="confidence", level=0.95)
summary(modelo.lineal2)
# Volumen PROMEDIO que esperaríamos de árboles de 15 pulgadas
#predict(modelo.lineal, data.frame(areaconst = 200), interval = "confidence")
nuevo <- data.frame(areaconst=200)
predict(object=modelo.lineal, newdata=nuevo, interval="confidence", level=0.95)
# Volumen PROMEDIO que esperaríamos de árboles de 15 pulgadas
#predict(modelo.lineal, data.frame(areaconst = 200), interval = "confidence")
nuevo <- data.frame(preciom=200)
predict(object=modelo.lineal, newdata=nuevo, interval="confidence", level=0.95)
modelo.lineal <- lm(preciom ~ areaconst , data = data1)
# Información del modelo
summary(modelo.lineal)
confint(modelo.lineal)
ggplot(data = data1, mapping = aes(x = areaconst, y = preciom)) +
geom_point(color = "firebrick", size = 2) +
geom_smooth(method = "lm", se = TRUE, color = "black") +
labs(title = "Area ~ Precio", x = "Área", y = "Precio") +
theme_bw() + theme(plot.title = element_text(hjust = 0.5))
modelo.lineal2 <- lm(preciom ~ areaconst, data= data1[c(-28,-148,-230,-442,-664, -911),])
summary(modelo.lineal2)
influencePlot(model = modelo.lineal2)
# Volumen PROMEDIO que esperaríamos de árboles de 15 pulgadas
predict(modelo.lineal, data.frame(areaconst = 200), interval = "confidence")
nuevo <- data.frame(preciom=200)
predict(object=modelo.lineal, newdata=nuevo, interval="confidence", level=0.95)
# Volumen esperado de UN árbol de 15 pulgadas
predict(modelo.lineal, data.frame(areaconst = 15), interval = "prediction")
# Volumen esperado de UN árbol de 15 pulgadas
predict(modelo.lineal, data.frame(areaconst = 300), interval = "prediction")
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(readxl)
library(data.table)
library(paqueteMET)
library(writexl)#libreria para guardar el archivo como excel.
data <- readRDS("Datos/vivienda4.RDS")
library(dplyr)
library(readxl)
library(data.table)
library(paqueteMET)
library(writexl)#libreria para guardar el archivo como excel.
data <- readRDS("Datos/vivienda4.RDS")
library(dplyr)
library(readxl)
library(data.table)
library(paqueteMET)
library(writexl)#libreria para guardar el archivo como excel.
data <- readRDS("Datos/vivienda4.RDS")
# Realice un análisis exploratorio de las variables precio de vivienda (millones de pesos COP)
# y área de la vivienda (metros cuadrados) - incluir gráficos e indicadores apropiados interpretados.
# Medidas de centralidad para el precio
promedio <- mean(data$preciom,na.rm = T)
mediana <- median(data$preciom,na.rm = T)
# moda (con datos agrupados en intervalos usando el caso de igual longitud de intervalos)
# Medidas de variabilidad para el precio
coef_apertura <- max(data$preciom, na.rm = T)/min(data$preciom,na.rm = T)
varianza <- var(data$preciom, na.rm = T)
desv_estandar <- sd(data$preciom, na.rm = T)
CV <- round(100*desv_estandar/promedio,2)
# Coeficiente de asimertria y curtosis para el precio
CA <- mean((data$preciom - promedio)^3)/(mean((data$preciom - promedio)^2))^(3/2)
CC <- mean((data$preciom - promedio)^4)/(mean((data$preciom - promedio)^2))^(2) - 3
# Medidas de posicion para el precio
Q1 <- quantile(data$preciom, probs = 0.25, type = 6)
Q2 <- quantile(data$preciom, probs = 0.50, type = 6)
Q3 <- quantile(data$preciom, probs = 0.75, type = 6)
# Tabla resumen para el precio
tb_resumen <- data.frame(
Minimo = min(data$preciom, na.rm = T),
Q1 = Q1,
Q2 = Q2,
Promedio = promedio,
Mediana = mediana,
Q3 = Q3,
Maximo = max(data$preciom, na.rm = T),
Coef_apertura = coef_apertura,
varianza = varianza,
Desv.Estandar = desv_estandar,
Coef.Variacion = CV,
Coef.Asimetria = CA,
Coef.Curtosis = CC
)
tb_resumen
saveRDS(tb_resumen, "Resultados/tb_resumen.rds")
write_xlsx(tb_resumen,"Resultados/AED_precio.xlsx")
library(ggplot2)
# Histograma para el precio
hist(data$preciom, freq = FALSE,main = "Distribución del Precio de las Viviendas",
xlab = "Precio dela vivienda", ylab = "Conteo", col = "green")
lines(density(data$preciom),col="red",lwd=2)
curve(dnorm(x,mean=mean(data$preciom),sd=sd(data$preciom)), from=0,to=1000,
add=TRUE, col="blue", lwd=2)
legend("topleft",col=c("blue","red"),legend =c("Densidad normal estimada","Estimador de núcleo de la densidad"),lwd=2, bty = "n")
# Diagrama de caja para el precio
boxplot(data$preciom, main = "Distribución del Precio de las Viviendas",
xlab = "Precio dela vivienda", ylab = "Conteo", col = "green")
# Datos atípicos para el precio
bi <- Q1 - 1.5*(Q3 - Q1)
bi1 <- max(bi,78)
bi1
# bigote inferior es 78
bs <- Q3 + 1.5*(Q3 - Q1)
bs2<- min(bs,760)
bs2
#bigote superior  es 422.5
library(DT)
tb_resumen_LOCALIDAD<-readRDS("Resultados/tb_resumen.rds")
datatable(tb_resumen_LOCALIDAD)
library(normtest) ###REALIZA 5 PRUEBAS DE NORMALIDAD###
library(nortest) ###REALIZA 10 PRUEBAS DE NORMALIDAD###
library(moments) ###REALIZA 1 PRUEBA DE NORMALIDAD###
lillie.test(data$preciom)
library(normtest) ###REALIZA 5 PRUEBAS DE NORMALIDAD###
library(nortest) ###REALIZA 10 PRUEBAS DE NORMALIDAD###
library(moments) ###REALIZA 1 PRUEBA DE NORMALIDAD###
lillie.test(data$preciom)
shapiro.test(data$preciom)
data1=subset(data, (data$preciom < 422.5  & data$areaconst < 155))
pairs(data1)
# Datos sin datos atípicos
data1=subset(data, (data$preciom < 422.5  & data$areaconst < 155))
pairs(data1)
# Gráfica de dispersión
library(ggplot2)
ggplot(data = data1, mapping = aes(x = areaconst, y = preciom)) +
geom_point(color = "firebrick", size = 2) +
labs(title = "Diagrama de dispersión", x = "Área Construida", y = "Precio") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
abline(regresion)
# Cálculo del modelo de resesión lineal simple
modelo.lineal <- lm(preciom ~ areaconst , data = data1)
# Información del modelo
summary(modelo.lineal)
#Intervalo de confianza del modelo
confint(modelo.lineal)
ggplot(data = data1, mapping = aes(x = areaconst , y = preciom)) +
geom_point(color = "firebrick", size = 2) +
geom_smooth(method = "lm", se = TRUE, color = "black") +
labs(title = "Precio ~ Área Construida", x = "Área Construida", y = "Precio") +
theme_bw() + theme(plot.title = element_text(hjust = 0.5))
library(ggplot2)
ggplot(data = data1, mapping = aes(x = areaconst , y = preciom)) +
geom_point(color = "firebrick", size = 2) +
geom_smooth(method = "lm", se = TRUE, color = "black") +
labs(title = "Precio ~ Área Construida", x = "Área Construida", y = "Precio") +
theme_bw() + theme(plot.title = element_text(hjust = 0.5))
library(ggplot2)
ggplot(data1 = data1, mapping = aes(x = areaconst , y = preciom)) +
geom_point(color = "firebrick", size = 2) +
geom_smooth(method = "lm", se = TRUE, color = "black") +
labs(title = "Precio ~ Área Construida", x = "Área Construida", y = "Precio") +
theme_bw() + theme(plot.title = element_text(hjust = 0.5))
# Test de Breush-Pagan (homocedasticidad de los residuos)
library(lmtest)
bptest(modelo.lineal)
# Tabla resumen para el precio
tb_resumen <- data.frame(
Minimoa = min(data$areaconst, na.rm = T),
Q1a = Q1a,
Q2a = Q2a,
Promedioa = promedioa,
Medianaa = medianaa,
Q3a = Q3a,
Maximoa = max(data$areaconst, na.rm = T),
Coef_aperturaa = coef_aperturaa,
varianzaa = varianzaa,
Desv.Estandara = desv_estandara,
Coef.Variaciona = CVa,
Coef.Asimetriaa = CAa,
Coef.Curtosisa = CCa
)
tb_resumen
saveRDS(tb_resumen, "Resultados/tb_resumenareaconst.rds")
write_xlsx(tb_resumen,"Resultados/AED_areaconst.xlsx")
library(ggplot2)
# Histograma para el precio
hist(data$areaconst, freq = FALSE,main = "Distribución del área construida",
xlab = "Área construida", ylab = "Conteo", col = "green")
lines(density(data$areaconst),col="red",lwd=2)
curve(dnorm(x,mean=mean(data$areaconst),sd=sd(data$areaconst)), from=0,to=1000,
add=TRUE, col="blue", lwd=2)
legend("topleft",col=c("blue","red"),legend =c("Densidad normal estimada","Estimador de núcleo de la densidad"),lwd=2, bty = "n")
# Diagrama de caja para el precio
boxplot(data$areaconst, main = "Distribución del Precio de las Viviendas",
xlab = "Precio dela vivienda", ylab = "Conteo", col = "green")
bia <- Q1a - 1.5*(Q3a - Q1a)
bi1a <- max(bia,40)
bi1a
bsa <- Q3a + 1.5*(Q3a - Q1a)
bs1a <- min(bsa,200)
bs1a
#=================================
library(dplyr)
horas_agr <- data %>%
select(preciom, zona) %>%#seleccionar solo precio y zona
group_by(zona) %>%#agrupar por zona
summarise(Total = sum(preciom, na.rm = T)) %>%# sumarizar valores a una sola fila por grupo
arrange(desc(Total)) %>% #Ordenar descendente las filas según alguna variable
mutate( zona = as.character(zona)) %>% # crear una nueva variable caracter
str(horas_agr)#imprimir datos
library(dplyr)
horas_agr <- data %>%
select(preciom, zona) %>%#seleccionar solo precio y zona
group_by(zona) %>%#agrupar por zona
summarise(Total = sum(preciom, na.rm = T)) %>%# sumarizar valores a una sola fila por grupo
arrange(desc(Total)) %>% #Ordenar descendente las filas según alguna variable
mutate( zona = as.character(zona)) %>% # crear una nueva variable caracter
str(horas_agr)#imprimir datos
library(dplyr)
horas_agr1 <- data %>%
select(preciom, zona) %>%#seleccionar solo precio y zona
group_by(zona) %>%#agrupar por zona
summarise(Total = sum(preciom, na.rm = T)) %>%# sumarizar valores a una sola fila por grupo
arrange(desc(Total)) %>% #Ordenar descendente las filas según alguna variable
mutate( zona = as.character(zona)) %>% # crear una nueva variable caracter
str(horas_agr1)#imprimir datos
library(dplyr)
horas_agr1 <- data
horas_agr1 <- data %>%
select(preciom, zona) #seleccionar solo precio y zona
horas_agr1
View(horas_agr1)
horas_agr1 <- data %>%
select(preciom, zona) %>%#seleccionar solo precio y zona
group_by(zona) %>%#agrupar por zona
summarise(Total = sum(preciom, na.rm = T)) %>%# sumarizar valores a una sola fila por grupo
arrange(desc(Total)) %>% #Ordenar descendente las filas según alguna variable
mutate( zona = as.character(zona)) %>% # crear una nueva variable caracter
str(horas_agr1)#imprimir datos
#=========== para hacer el conteo por localidades
conteo_h <- horas_agr %>%
group_by(LOCALIDAD_TEX) %>% #agrupar por localidad
summarise(n_i = n()) %>%  #sumarizar valores a una sola fila por grupo
mutate(N_i = cumsum(n_i), f_i = n_i /sum(n_i), F_i = cumsum(f_i))#crear encabezado de la tabla
#=========== para hacer el conteo por localidades
conteo_h <- horas_agr1 %>%
group_by(zona) %>% #agrupar por localidad
summarise(n_i = n()) %>%  #sumarizar valores a una sola fila por grupo
mutate(N_i = cumsum(n_i), f_i = n_i /sum(n_i), F_i = cumsum(f_i))#crear encabezado de la tabla
library(dplyr)
horas_agr1 <- data %>%
select(preciom, zona) %>%#seleccionar solo precio y zona
#=========== para hacer el conteo por localidades
conteo_h <- horas_agr1 %>%
group_by(zona) %>% #agrupar por localidad
summarise(n_i = n()) %>%  #sumarizar valores a una sola fila por grupo
mutate(N_i = cumsum(n_i), f_i = n_i /sum(n_i), F_i = cumsum(f_i))#crear encabezado de la tabla
horas_agr1 <- data %>%
select(preciom, zona) %>%#seleccionar solo precio y zona
str(agr1)
horas_agr1 <- data %>%
select(preciom, zona) %>%#seleccionar solo precio y zona
str(agr1)
horas_agr1 <- data %>%
select(preciom, zona) %>%#seleccionar solo precio y zona
str(horas_agr1)
horas_agr1 <- data %>%
select(preciom, zona) #seleccionar solo precio y zona
View(horas_agr1)
str(horas_agr1)
#=========== para hacer el conteo por localidades
conteo_h <- horas_agr1 %>%
group_by(zona) %>% #agrupar por localidad
summarise(n_i = n()) %>%  #sumarizar valores a una sola fila por grupo
mutate(N_i = cumsum(n_i), f_i = n_i /sum(n_i), F_i = cumsum(f_i))#crear encabezado de la tabla
str(conteo_h)#imprimir tabla
#=========== para hacer el conteo por localidades
conteo_h <- horas_agr1 %>%
group_by(zona) %>% #agrupar por localidad
summarise(n_i = n()) %>%  #sumarizar valores a una sola fila por grupo
mutate(N_i = cumsum(n_i), f_i = n_i /sum(n_i), F_i = cumsum(f_i))#crear encabezado de la tabla
str(conteo_h)#imprimir tabla
saveRDS(conteo_h, "Resultados/conteo_h.rds")#guardar archivo en formato .RDS más facile de leer.
conteo_h5 <- conteo_h %>% # realizar el conteo del top de los 5 mejores.
arrange(desc(n_i)) %>%
slice(1:5)
View(conteo_h5)
library(esquisse)#libreria para crear gráficos
esquisser()# crear el gráfico, importando datos.
library(esquisse)#libreria para crear gráficos
esquisser()# crear el gráfico, importando datos.
library(ggplot2)
ggplot(horas_agr1) +
aes(x = zona, y = preciom, fill = preciom, colour = zona, size = zona) +
geom_col() +
scale_fill_gradient() +
scale_color_hue(direction = 1) +
labs(x = "Zonas", caption = "Distribución por zonas") +
theme_minimal()
ggplot(horas_agr1) +
aes(x = zona, y = preciom, fill = preciom, colour = zona, size = zona) +
geom_col() +
scale_fill_gradient() +
scale_color_hue(direction = 1) +
labs(x = "Zonas") +
theme_minimal()
ggplot(horas_agr1) +
aes(x = zona, y = preciom, fill = preciom, colour = zona) +
geom_col() +
scale_fill_gradient() +
scale_color_hue(direction = 1) +
labs(x = "Zonas") +
theme_minimal()
esquisser()# crear el gráfico, importando datos.
esquisser()
conteo_h2 <- data %>%
group_by(tipo) %>% #agrupar por zonas
summarise(n_i = n()) %>%  #sumarizar valores a una sola fila por grupo
mutate(N_i = cumsum(n_i), f_i = n_i /sum(n_i), F_i = cumsum(f_i))#crear encabezado de la tabla
str(conteo_h2)#imprimir tabla
saveRDS(conteo_h2, "Resultados/conteo_h.rds")#guardar archivo en formato .RDS más facile de leer.
conteo_h2 <- conteo_h2 %>% # realizar el conteo del top de los 5 mejores.
arrange(desc(n_i)) %>%
slice(1:5)
View(conteo_h5)
View(conteo_h2)
